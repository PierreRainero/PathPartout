import React from "react";
import PropTypes from 'prop-types';

import GoogleMapReact from 'google-map-react';

import Marker from './Marker';

import Ride from '../ride/Ride';
import Poi from "../ride/Poi";

import RideService from "../ride/RideService";

import 'purecss-sass/vendor/assets/stylesheets/purecss/_forms.scss';
import 'purecss-sass/vendor/assets/stylesheets/purecss/_buttons.scss';
import 'purecss-sass/vendor/assets/stylesheets/purecss/_grids.scss';
import 'css-modal/build/modal.css';
import 'font-awesome/css/font-awesome.min.css';

import './Map.scss';

class Map extends React.Component {
	constructor(props) {
		super(props);

		this.state = {
			zoom: 15,
			center: { // Default value (Polytech'Nice) :
				lat: 43.615366,
				lng: 7.072105
			},
			nameForNewPoi: "",
			descriptionForNewPoi: "",
			newRideName: ""
		};

		this.nextId = -1;
		this.standalone = false;
		this.creationMode = props.creationMode;
		this.newRide = new Ride(-1, "", "", undefined, undefined, []);

		if (props.ride === undefined) {
			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(this.getUserPosition);
			}
		} else {
			this.updateCenter(props.ride.pois[0].lat, props.ride.pois[0].lng);
		}

		this.handleNameChange = this.handleNameChange.bind(this);
		this.handleDescriptionChange = this.handleDescriptionChange.bind(this);
		this.handleRideTitleChange = this.handleRideTitleChange.bind(this);
	}

	getNextId = () => {
		return this.nextId++;
	}

	getUserPosition = (position) => {
		this.userLat = position.coords.latitude;
		this.userLng = position.coords.longitude;
		this.updateCenter(this.userLat, this.userLng);
		this.setState({ center: this.center });
	}

	updateCenter = (lat, lng) => {
		this.center = {
			lat: lat,
			lng: lng
		};
	}

	/**
	 * Generate a path using all the pois of a ride
	 */
	generatePath = (ride) => {
		const poisLength = ride.pois.length;
		const path = [];
		let i = 0;

		while (i < poisLength) {
			path.push({ lat: ride.pois[i].lat, lng: ride.pois[i].lng });
			i++;
		}

		return path;
	}

	// -------- RENDER PATH --------
	/**
	 * Render the path for the first time (set variables for rerender)
	 */
	firstRenderPolylines = (map, maps) => {
		this.map = map;
		this.maps = maps;

		this.renderPolylines();
	}

	/**
	 * Clean previous path and rerender the new one
	 */
	reRenderPolylines = () => {
		if (this.polyline === undefined) {
			return;
		}

		this.cleanPolylines();
		this.renderPolylines();
	}

	/**
	 * Clean previous path
	 */
	cleanPolylines = () => {
		if (this.polyline !== undefined) {
			this.polyline.setMap(null);
		}
	}

	/**
	 * Render the path generated by all the pois of the ride
	 */
	renderPolylines = () => {
		if (this.passedRide !== undefined) {
			this.polyline = new this.maps.Polyline({
				path: this.generatePath(this.passedRide),
				geodesic: false,
				strokeColor: '#009b00',
				strokeOpacity: 1,
				strokeWeight: 3
			});
		} else if (this.newRide.pois.length > 0) {
			this.polyline = new this.maps.Polyline({
				path: this.generatePath(this.newRide),
				geodesic: false,
				strokeColor: '#009b00',
				strokeOpacity: 1,
				strokeWeight: 3
			});
		} else {
			return;
		}

		this.polyline.setMap(this.map);
	}
	// -----------------------------

	// ----- MAP INTERACTIONS ------
	/**
	 * Add a poi to the ride
	 */
	addPoi = (event) => {
		const poi = new Poi(this.getNextId(), this.state.nameForNewPoi, this.state.descriptionForNewPoi, this.lastCoord.lat, this.lastCoord.lng);
		this.newRide.pois.push(poi);
		this.closeModal();

		this.setState({ nameForNewPoi: "" });
		this.setState({ descriptionForNewPoi: "" });

		event.preventDefault();
	}

	handleNameChange = (event) => {
		this.setState({ nameForNewPoi: event.target.value });
	}
	handleDescriptionChange = (event) => {
		this.setState({ descriptionForNewPoi: event.target.value });
	}
	handleRideTitleChange = (event) => {
		this.setState({ newRideName: event.target.value });
	}

	/**
	 * Handle a left click on the map
	 */
	clickOnMap = ({ x, y, lat, lng, event }) => {
		if (this.creationMode) {
			this.updateLastCoord(lat, lng);
		} else if (this.props.history.location.state !== undefined && this.props.history.location.state.inCreationMode) {
			this.updateLastCoord(lat, lng);
			this.creationMode = true;
			this.standalone = true;
		}
	}

	updateLastCoord = (lat, lng) => {
		this.lastCoord = {
			lat: lat,
			lng: lng
		};
		document.getElementById('modal-actionner').click();
	}

	closeModal = () => {
		document.getElementById('modal-dismisser').click();
	}
	// -----------------------------

	manageMode = () => {
		if (!this.standalone) {
			this.creationMode = this.props.creationMode;
		}

		if (this.creationMode) {
			this.passedRide = undefined;
		} else {
			if (this.props.match !== undefined) {
				this.passedRide = RideService.getRideById(this.props.match.params.id);
			}
			this.passedRide = this.props.ride !== undefined ? this.props.ride : this.passedRide;
		}
	}

	// -------- RENDER MAP --------
	createMapOptions = (maps) => {
		return {
			panControl: false,
			mapTypeControl: false,
			scrollwheel: false,
			styles: [{
				featureType: "poi",
				stylers: [
					{ visibility: "off" }
				]
			}
			]
		}
	}

	generateMarkers = (pois) => {
		return pois.map(el =>
			<Marker
				key={el.id}
				title={el.name}
				body={el.description}
				lat={el.lat}
				lng={el.lng}
			/>
		);
	}

	generateMap = () => {
		let markers;
		let event;

		if (this.passedRide !== undefined) {
			this.updateCenter(this.passedRide.pois[0].lat, this.passedRide.pois[0].lng);
			markers = this.generateMarkers(this.passedRide.pois);
		} else {
			if (this.newRide.pois.length > 0) {
				markers = this.generateMarkers(this.newRide.pois);
			}
			event = this.clickOnMap;
		}

		this.reRenderPolylines();
		return <GoogleMapReact
			bootstrapURLKeys={{
				key: `${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}`,
				language: 'fr',
				region: 'fr'
			}}
			center={this.center}
			defaultZoom={this.state.zoom}
			onGoogleApiLoaded={({ map, maps }) => this.firstRenderPolylines(map, maps)}
			yesIWantToUseGoogleMapApiInternals
			options={this.createMapOptions}

			onClick={event}
		>
			{markers}
		</GoogleMapReact>;
	}
	// ----------------------------

	render() {
		this.manageMode();
		let mapHeader;

		if(this.creationMode){
			mapHeader = <form className="pure-form">
			<div className="pure-control-group">
				<input id="rideTitle" type="text" placeholder="Nom du trajet" className="header-map"
				value={this.state.newRideName} onChange={this.handleRideTitleChange}></input>
				<button className="pure-button button-primary">
					<i className="fa fa-save"></i>
				</button>
			</div>
		</form>;
		}

		return (
			<div style={{ height: '100vh', width: '100%' }}>
				{mapHeader}
				{this.generateMap()}
				<section className="modal--show" id="add-marker-modal" tabIndex="-1"
					role="dialog" aria-labelledby="modal-label" aria-hidden="true">

					<div className="modal-inner">
						<header id="modal-label" className="modal-title">
							<i className="fa fa-map-marker"></i><span> Ajouter une Etape</span>
						</header>

						<div className="modal-content center">
							<form className="pure-form pure-form-stacked">
								<input id="name" type="text" placeholder="Nom" className="fill-parent"
									value={this.state.nameForNewPoi} onChange={this.handleNameChange}></input>
								<textarea id="description" placeholder="Description" className="fill-parent no-resizable"
									value={this.state.descriptionForNewPoi} onChange={this.handleDescriptionChange}></textarea>
							</form>
						</div>
						<footer className="pure-g">
							<div className="pure-u-1 pure-u-md-1-2">
								<button className="pure-button button-danger" onClick={this.closeModal}>
									<i className="fa fa-times "></i><span> Annuler</span>
								</button>
							</div>
							<div className="pure-u-1 pure-u-md-1-2">
								<button className="pure-button button-primary" onClick={this.addPoi}>
									<i className="fa fa-check"></i><span> Ajouter</span>
								</button>
							</div>
						</footer>
					</div>

					<a href="#!" className="modal-close" title="Fermer" data-close="Fermer" data-dismiss="modal" id="modal-dismisser">?</a>
				</section>
				<a href="#add-marker-modal" id='modal-actionner' className='hidden'> </a>
			</div>
		);
	}
}

Map.defaultProps = {
	ride: undefined,
	creationMode: false
};

Map.propTypes = {
	ride: PropTypes.any,
	creationMode: PropTypes.bool
};

export default Map;